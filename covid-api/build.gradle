buildscript {
    ext {
        springBootVersion = '2.2.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

apply plugin: 'docker'
apply plugin: 'jacoco'

group = 'com.tacs.grupo1'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'io.jsonwebtoken:jjwt-api:0.11.1'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.3.0.RELEASE'
    compile group: 'org.json', name: 'json', version: '20200518'
    compile group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '8.3.1.jre14-preview'
    compile group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.1'
    runtime group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    //compileOnly group: 'com.google.guava', name: 'guava', version: '11.0.2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

bootJar {
    destinationDirectory = file("build/output")
    archiveName 'application.jar'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}

check.dependsOn jacocoTestReport
// to run coverage verification during the build
check.dependsOn jacocoTestCoverageVerification
